// Generated by Xata Codegen
import { buildClient } from '@xata.io/client';
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from '@xata.io/client';

const tables = [
  {
    name: 'conversations',
    columns: [
      { name: 'sessionId', type: 'string', unique: true },
      { name: 'messages', type: 'json' },
      { name: 'createdAt', type: 'datetime' }
    ]
  },
  {
    name: 'order_states',
    columns: [
      { name: 'sessionId', type: 'string', unique: true },
      { name: 'stage', type: 'string' },
      { name: 'service', type: 'string' },
      { name: 'customNotes', type: 'text' },
      { name: 'price', type: 'float' },
      { name: 'customerData', type: 'json' },
      { name: 'paymentMethod', type: 'string' }
    ]
  }
] as const;

export interface Conversation extends XataRecord {
  sessionId: string;
  messages: any[];
  createdAt: Date;
}

export interface OrderState extends XataRecord {
  sessionId: string;
  stage: string;
  service?: string;
  customNotes?: string;
  price?: number;
  customerData?: {
    name: string;
    email: string;
    phone: string;
    isNew: boolean;
  };
  paymentMethod?: string;
}

export type DatabaseSchema = {
  conversations: Conversation;
  order_states: OrderState;
};

const DatabaseClient = buildClient();


const defaultOptions = {
  databaseURL: process.env.XATA_DATABASE_URL,
  apiKey: process.env.XATA_API_KEY,
  branch: process.env.XATA_BRANCH || 'main'

};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

export const xata = new XataClient();
